#! /usr/bin/env python3
"""
A command line tool for creating and compiling TeX files

Notes
-----

1. Document Creation.

By way of example, suppose that you want to create a TeX document with the
article class called 'foo_bar.tex'. Then enter

    autotex -a foo_bar.tex

See --help for a list of supported sequences. 

2. Compilation Sequences. 

By way of example, the call sequence 'pbpp' means call 'pdflatex' once, then 
'bibtex' once, then 'pdflatex' twice. The following sequences are supported:

    Name    Sequence    Description
    ----    --------    -----------
    easy    p           basic compilation 
    refs    pp          second compilation handles reference numbering 
    full    pbpp        compilation sequence for BibTeX

References
----------
The Internet

TODO: find a better reference. 
"""
from argparse import ArgumentParser
import subprocess, os

def _template(_class):
    """
    Returns a minimalist TeX template

    Parameters
    ----------
    _class : str
        LaTeX document classes. A complete list of classes can be found at  
        https://en.wikibooks.org/wiki/LaTeX/Document_Structure
    """
    template = ''
    template += '\\documentclass{{{}}}\n'
    template += '\\begin{{document}}\n'
    template += 'PC load letter\n'
    template += '\\end{{document}}'
    return template.format(_class)

def main():

    # -------------------------------------------------------------------------
    # parse 

    # (com)mand (seq)uences
    _class_list = ['article','beamer','letter']
    _calls_dict = {'easy' : 'p', 'full' : 'pbpp', 'refs' : 'pp'}
    _call_name = {'b' : 'bibtex', 'p' : 'pdflatex'}
    # TODO rename '_long_name' 

    # parse input
    _description = "A command line tool for creating and compiling TeX files"
    parser = ArgumentParser(description=_description)
    
    # create TeX file of class '_class'
    for _class in _class_list:
        parser.add_argument("-"+_class[0],"--"+_class,
            metavar='_',
            help="creates a TeX file using the " + _class + " class") 

    # compile TeX file(s) using the call sequence '_calls'
    for _calls in _calls_dict.keys():
        parser.add_argument("-"+_calls[0],"--"+_calls,
            action="store_true",
            help="compiles using the '" + _calls + "' sequence (see --docs)") 

    # open PDF(s)
    parser.add_argument("-i","--hide",
        action="store_true",
        help="don't display pdf after compilation")

    # documentation
    parser.add_argument("-d","--docs",
        action="store_true",
        help="displays additional info on compilation sequences")

    # parse arguments
    args = parser.parse_args()
    args_dict = vars(args)

    # -------------------------------------------------------------------------
    # execute

    # display docstring
    if args.docs:
        print(__doc__)

    # (if desired) create article, beamer, or letter TeX file
    for _class in _class_list:
        if args_dict[_class]:
            fname = args_dict[_class].replace('.tex','')+'.tex'
            f = open(fname,'w')
            f.write(_template(_class))
            f.close()
            subprocess.run(['vim',fname])
            #TODO autodetect the system text editor (using $EDITOR?)

    # parse compilation sequences
    calls = [_calls for _calls in _calls_dict.keys() if args_dict[_calls]]
    if len(calls) > 1:
        raise Exception("You have selected more than one call sequence.")
             
    # (if desired) compile
    if calls:
        tex_files = [f for f in os.listdir() if f.endswith('.tex')]
        if len(tex_files) == 0:
            raise Exception("There are no TeX files in this directory! " +
                "Use the -h option for info on creating new TeX files.")
        if len(tex_files) > 1:
            raise Exception("There are more than one TeX file in this " + 
                "directory. This is poor practice. Reorganize and try again.")
        for call in _calls_dict[calls[0]]:
            subprocess.run([_call_name[call],tex_files[0].replace('.tex','')])
        if not args.hide:
            subprocess.run(['evince',tex_files[0].replace('.tex','.pdf')])
            #TODO autodetect the system pdf reader

    # clean-up
    return args

_args = main()
