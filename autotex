#! /usr/bin/env python3
"""A command line tool for creating and compiling TeX files"""
from argparse import ArgumentParser
import subprocess, os

def _template(_class):
    """
    Returns a minimalist TeX template

    Parameters
    ----------
    _class : str
        LaTeX document classes. A complete list of classes can be found at  
        https://en.wikibooks.org/wiki/LaTeX/Document_Structure
    """
    template = ''
    template += '\\documentclass{{{}}}\n'
    template += '\\begin{{document}}\n'
    template += 'PC load letter\n'
    template += '\\end{{document}}'
    return template.format(_class)

def main():

    # -------------------------------------------------------------------------
    # parse 

    # NOTES: by way of example, the call sequence 'ppbpp' means call 'pdflatex'
    # twice, then 'bibtex' once, then 'pdflatex' twice. 

    # (com)mand (seq)uences
    _class_set = ['article','beamer','letter']
    _calls_set = {'easy' : 'p', 'full' : 'ppbpp', 'refs' : 'pp'}

    # parse input
    parser = ArgumentParser()
    
    # create TeX file of class '_class'
    for _class in _class_set:
        parser.add_argument("-"+_class[0],"--"+_class,
            help="Creates a TeX file using the " + _class + " class") 

    # compile TeX file(s) using the call sequence '_calls'
    for _calls in _calls_set.keys():
        parser.add_argument("-"+_calls[0],"--"+_calls,
            action="store_true",
            help="Compiles a TeX file using the " + _calls + " class") 

    # open PDF(s)
    parser.add_argument("-i","--hide",
        action="store_false",
        help="Don't display pdf after compilation")

    # parse arguments
    args = parser.parse_args()
    args_dict = vars(args)

    # -------------------------------------------------------------------------
    # execute

    # (if desired) create article, beamer, or letter TeX file
    for _class in _class_set:
        if args_dict[_class]:
            fname = args_dict[_class].replace('.tex','')+'.tex'
            f = open(fname,'w')
            f.write(_template(_class))
            f.close()
            subprocess.run(['vim',fname])
            #TODO autodetect the system text editor (using $EDITOR?)

    # (if desired) compile
    if args.comp or args.full or args.refs:
        tex_files = [f for f in os.listdir() if f.endswith('.tex')]
        if not tex_files:
            raise Exception("There are no TeX files in this directory! " +
                "Use the '-b' or '-c' options to create a new file.")
        elif len(tex_files) > 1:
            raise Exception("There are more than one TeX file in this " + 
                "directory. This is poor practice. Fix and then try again.")
        else:
            for f in tex_files: 
                for _calls in _calls_set:
                    if args_dict[_calls]: 
                        for call in _calls_set[_calls]:
                            subprocess.run([call,f.replace('.tex','')])
                if not args.hide:
                    subprocess.run(['evince',f.replace('.tex','.pdf')])
                    #TODO autodetect the system pdf reader

main()
