#! /usr/bin/env python3
"""A command line tool for creating and compiling TeX files"""
from argparse import ArgumentParser
import subprocess, os

def _template(_class):
    """
    Returns a minimalist TeX template

    Parameters
    ----------
    _class : str
        LaTeX document classes. A complete list of classes can be found at  
        https://en.wikibooks.org/wiki/LaTeX/Document_Structure
    """
    template = ''
    template += '\\documentclass{{{}}}\n'
    template += '\\begin{{document}}\n'
    template += 'No Gods, No Masters!\n'
    template += '\\end{{document}}'
    return template.format(_class)

def main():

    # -------------------------------------------------------------------------
    # parameters

    # (com)mand (seq)uences
    cmd_seq = {}
    cmd_seq['comp'] = ['pdflatex']
    cmd_seq['full'] = ['pdflatex','pdflatex','bibtex','pdflatex','pdflatex']
    cmd_seq['refs'] = ['pdflatex','pdflatex']

    _class_set = frozenset(('article','beamer','letter'))
    _compile_set = frozenset(('article','beamer','letter'))

    # -------------------------------------------------------------------------
    # parse arguments

    # parse input
    parser = ArgumentParser()
    
    # create TeX file of class '_class'
    for _class in _class_set:
        parser.add_argument("-"+_class[0],"--"+_class,
            help="Creates a TeX file using the " + _class + " class") 

    # compile using the command sequence '_cmdseq'
    for _cmd in _cmdseq:

    # compile arguments
    parser.add_argument("-c","--comp",
        action="store_true",
        help="Compile arguments") 

    # compile to resolve references
    parser.add_argument("-r","--refs",
        action="store_true",
        help="Resolve references")  

    # full compile
    parser.add_argument("-f","--full",
        action="store_true",
        help="Full compile with BibTeX")

    # open PDF(s)
    parser.add_argument("-d","--display",
        action="store_false",
        help="Don't display pdf file")

    # parse arguments
    args = parser.parse_args()
    args_dict = vars(args)

    # -------------------------------------------------------------------------
    # parse arguments

    # creater article, beamer, or letter file
    for _class in ['article','beamer','letter']:
        if args_dict[_class]:
            fname = args_dict[_class].replace('.tex','')+'.tex'
            f = open(fname,'w')
            f.write(_template(_class))
            f.close()
            #TODO use $EDITOR and raise an exception if $EDITOR is empty
            subprocess.run(['vim',fname])

    tex_drops = []
    if args.compile or args.full or args.refs:
        tex_files = [f for f in os.listdir() if f.endswith('.tex')]
        if not tex_files:
            raise Exception("There are no TeX files in this directory! " +
                "Use the '-b' or '-c' options to create a new file.")
        elif len(tex_files) > 1:
            print("There are more than one TeX file in this directory. " +
                "Which one(s) would you like to compile?")
            for f in tex_files:
                if input("Compile " + f + "? (y/N) ") is 'y':
                    tex_drops.append(f)
        else:
            tex_drops = tex_files
    
    # -------------------------------------------------------------------------
    # compile

    for f in tex_drops:
        for seq in ['comp','full','refs']:
            if args_dict[seq]: 
                for cmd in cmd_seq[seq]:
                    subprocess.run([cmd,f.replace('.tex','')])
        if args.display:
            subprocess.run(['evince',f.replace('.tex','.pdf')])
            #TODO autodetect the system pdf reader

main()
